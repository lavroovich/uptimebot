import asyncio
import datetime
import requests
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.filters import Command
import os

API_TOKEN = os.getenv("BOT_TOKEN")
CHANNEL_ID = -1002626775922

bot = Bot(token=API_TOKEN)
dp = Dispatcher()

URL = "http://127.0.0.1:5005/ping"
monitoring_enabled = asyncio.Event()
monitoring_enabled.set()

last_panic_time = None 

def now():
    return datetime.datetime.now().strftime("%-d.%m.%y %H:%M")

async def send(msg):
    await bot.send_message(CHANNEL_ID, f"{now()} | {msg}")

async def sticker_goodbye():
    await bot.send_sticker(CHANNEL_ID, sticker='CAACAgIAAxkBAAEOtS9oT-mofCuD2UQYpMQoXesiJb0IwQACIBAAAjnv6EnsxqRNmVO_mTYE')

async def sticker_server():
    await bot.send_sticker(CHANNEL_ID, sticker='CAACAgIAAxkBAAEOt9BoUUxTwjcIc6U4U8hhrGBaH7ZXJAACq04AAnJrGEm88RKLlho8-DYE')

@dp.message(Command('monitoring'))
async def monitoring_command(message: Message):
    status = "üü¢ –í–ö–õ–Æ–ß–Å–ù" if monitoring_enabled.is_set() else "üî¥ –í–´–ö–õ–Æ–ß–ï–ù (—Ç–µ—Ö—Ä–∞–±–æ—Ç—ã)"
    panic = last_panic_time if last_panic_time else "‚Äì –µ—â—ë –Ω–µ –±—ã–ª–æ"

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîß –í–∫–ª—é—á–∏—Ç—å —Ç–µ—Ö —Ä–∞–±–æ—Ç—ã", callback_data="monitoring_off")],
        [InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ—Ö —Ä–∞–±–æ—Ç—ã", callback_data="monitoring_on")]
    ])

    text = f"‚ù§Ô∏è‚Äçüî• <b>AquaBank Heartbeat</b>\n\n" \
           f"üìÖ –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–∞–Ω–∏–∫–∞: <b>{panic}</b>\n" \
           f"‚öôÔ∏è –°—Ç–∞—Ç—É—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: <b>{status}</b>"

    await message.answer(text, parse_mode="HTML", reply_markup=kb)

@dp.callback_query(F.data.in_(['monitoring_on', 'monitoring_off']))
async def monitoring_buttons(callback: types.CallbackQuery):
    if callback.data == 'monitoring_off':
        if not monitoring_enabled.is_set():
            await callback.answer("–¢–µ—Ö—Ä–∞–±–æ—Ç—ã —É–∂–µ –≤–∫–ª—é—á–µ–Ω—ã", show_alert=True)
            return
        monitoring_enabled.clear()
        await send("üîß –ù–∞—á–∞–ª–∏—Å—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ. AquaBank –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è")
        await sticker_server()
        await callback.answer("–¢–µ—Ö—Ä–∞–±–æ—Ç—ã –≤–∫–ª—é—á–µ–Ω—ã ‚úÖ")

    elif callback.data == 'monitoring_on':
        if monitoring_enabled.is_set():
            await callback.answer("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É–∂–µ –≤–∫–ª—é—á—ë–Ω", show_alert=True)
            return
        monitoring_enabled.set()
        await send("‚úÖ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã. AquaBank —Å–Ω–æ–≤–∞ –¥–æ—Å—Ç—É–ø–µ–Ω")
        await callback.answer("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤–∫–ª—é—á—ë–Ω ‚úÖ")

    await monitoring_command(callback.message)

async def monitor_server():
    global last_panic_time
    connected = True
    status_500 = False

    while True:
        await monitoring_enabled.wait()

        try:
            r = requests.get(URL, timeout=5)
            if r.status_code == 200:
                if not connected:
                    await send("‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
                    connected = True
                if status_500:
                    await send("‚úÖ –°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å 200")
                    status_500 = False
                await asyncio.sleep(10)

            elif r.status_code == 500:
                await send("üçΩÔ∏è –°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å 500")
                status_500 = True
                await asyncio.sleep(10)

            else:
                await send(f"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {r.status_code}")
                await asyncio.sleep(10)

        except requests.RequestException:
            if connected:
                await send("‚ö†Ô∏è –ü–µ—Ä–µ–±–æ–π –≤ —Ä–∞–±–æ—Ç–µ")
                last_panic_time = now()
                connected = False

            for i in range(5):
                if not monitoring_enabled.is_set():
                    break
                await send(f"‚ö†Ô∏è‚è≥ –ü–æ–ø—ã—Ç–∫–∞ –≤–µ—Ä–Ω—É—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º, {i+1} –∏–∑ 5")
                try:
                    r = requests.get(URL, timeout=5)
                    if r.status_code == 200:
                        await send("‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
                        connected = True
                        break
                    elif r.status_code == 500:
                        await send("üçΩÔ∏è –°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å 500")
                        status_500 = True
                except:
                    pass
                await asyncio.sleep(10)

            if not connected and monitoring_enabled.is_set():
                await send("‚ùå –°–µ—Ä–≤–µ—Ä aquabank —É–º–µ—Ä")
                await sticker_goodbye()

                while monitoring_enabled.is_set():
                    await asyncio.sleep(5)
                    try:
                        r = requests.get(URL, timeout=5)
                        if r.status_code == 200:
                            await send("‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
                            connected = True
                            break
                        elif r.status_code == 500:
                            await send("üçΩÔ∏è –°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å 500")
                            status_500 = True
                    except:
                        pass

async def main():
    asyncio.create_task(monitor_server())
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())